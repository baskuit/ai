abstraction: |
  A method for solving incomplete information games that are too large to be solved in their
  original form. The original game is abstracted to create a smaller game that is strategically
  similar, such that the new abstract game can be solved and the solution can be mapped back to the
  original to serve as an approximation to the true solution to the original game. In Pokémon,
  techniques such as [bucketing](#bucketing) can be used to reduce the state space, or the original
  game may be mapped to a [variant](#variant) which is more tractable.
action: |
  A feasible operation on the [state](#state) ---  _i.e._, a move a [player](#player) can make at a
  stage in the [game](#game). [move]{.dfn} is ambiguous in Pokémon, as Pokémon have
  [moves](https://bulbapedia.bulbagarden.net/wiki/Move) and thus some of the game theoretical moves
  of a player in a Pokémon battle includes the action of literally using one of their Pokémon's
  moves. [Pokémon Showdown](#PS) and [pkmn](#pkmn) instead use the terms _choice_ and _choices_
  instead of _action_ and _actions_, and [poke-sim](https://github.com/aed3/poke-sim/) refers to
  this as a [_decision_](https://github.com/aed3/poke-sim/blob/main/DESIGN_SPEC.md#decision) - all
  of these should be interchangeable, though using move to refer to an action/choice/decision should
  be avoided. Both player's choices considered together are called the [joint action]{.dfn}, and
  applying the join action to the battle state causes a [transition](#transition).
agent: |
  An intelligent agent ([IA]{.dfn}) is an entity that autonomously acts upon an environment to
  achieve its goals. In computer chess the individual agents are usually referred to as _engines_,
  but in competitive Pokémon artificial intelligence circles agent or [bot](#bot) is prefered as
  [engine](#engine) is used to refer to the code responsible for the simulation of core Pokémon
  battle mechanics.
Alpha-beta: |
  Alpha-beta pruning is a search algorithm that seeks to decrease the number of nodes that are
  evaluated by the [minimax](#minimax) algorithm in its search tree. When applied to a standard
  minimax tree, it returns the same move as minimax would, but [prunes](#pruning) away branches that
  cannot possibly influence the final decision. Alpha-beta has been shown to also work by
  [simultaneous move](#SM) games in [(Bošanský 2013)](/research#Bošanský:2013){.subtle} and
  [(Saffidine 2021)](/research#Saffidine:2021){.subtle}.
AlphaGo: |
  An influential artificial intelligence agent which achieved superhuman
  [Go](https://en.wikipedia.org/wiki/Go_(game)) performance using a combination of [Monte-carlo tree
  search](#MCTS) and [neural networks](#NN) [(Silver 2016)](/research#Silver:2016){.subtle}. Along
  with AlphaZero [(Silver 2017)](/research#Silver:2017){.subtle} and MuZero [(Silver
  2018)](/research#Silver:2018){.subtle}, the AlphaGo architecture serves as the modern foundation
  for many perfect information game-playing agents (_e.g._, [Lc0](#Lc0)).
anytime: |
  An anytime algorithm is an algorithm that can return a valid solution to a problem even if it is
  interrupted before it ends.
bandit: |
  The [multi-armed bandit problem]{.dfn} is a classic [reinforcement learning](#RL) problem that
  exemplifies the exploration--exploitation tradeoff dilemma. In the problem a fixed limited set of
  resources must be allocated between competing (alternative) choices in a way that maximizes their
  expected gain, when each choice's properties are only partially known at the time of allocation,
  and may become better understood as time passes or by allocating resources to the choice. In terms
  of competitive Pokémon AIs bandit problems arise when determining which parts of the [search tree
  to explore](#TBS), and _bandit_ usually refers to the particular type of algorithm being used to
  solve the bandit problem (_e.g._, [UCB](#UCB) or [Exp3](#Exp3)).
Bayes' rule: |
  The mathematical rule that describes how to update a [belief](#belief), given some evidence.
  Fundamental to Bayesian [inference](#inference) used by Pokémon AI in addition to the [usage
  statistics](#usage-stats) to reason about what [state](#state) they may be in.
Bayeselo: |
  [Bayesian Elo Rating](https://www.remi-coulom.fr/Bayesian-Elo/), a commonly used tool for
  estimating the [Elo](#Elo) rating based on matches between computerized agents.
belief: |
  Describes the probability of an event or information. The belief of a player in a given
  [information set](#information-set) determines what node in that information set he believes the
  game has reached. The belief may be a probability distribution over the nodes in the information
  set, and is typically a probability distribution over the possible types of the other players.
bimatrix game: |
  A [simultaneous game](#SM) for two players in which each player has a finite set of actions. Such
  a game can be fully described by two matrices, each describing the payoffs of one of the players.
binding: |
  Either refers to a [language binding]{.dfn}, the application programming interface that provides
  glue code specifically made to allow a programming language to use a foreign library or operating
  system service, or a [specific class of moves in Pokémon known as [binding
  moves]{.dfn}](https://bulbapedia.bulbagarden.net/wiki/Bound) which prevent their target from
  switching and cause damage for multiple turns (also known as _wrapping_ or _partial-trapping_
  moves).
BoN: |
  Abbreviation for Best-of-$`N`, where $`N` refers to the number of games used to decide the winner
  of a set of battles between two players (usually 1 or 3, _e.g._, _BO3_).
bot: |
  Slang term for [agent](#agent) derived from the word _robot_. Alternatively, may be used to
  characterize the parts of the [client](#client) code responsible for connecting and communicating
  with the [server](#server) and distinguishing it from the core search/knowledge components of the
  agent.
branching factor: |
  The number of children at each node in a [game tree](#game-tree), the outdegree.
bucketing: |
  Also known as [data binning]{.dfn}, a generalization of rounding data where the original data that
  falls within a small interval (known as a _bin_ or _bucket_) gets replaced by a value
  representative of that interval. This is a form of [abstraction](#abstraction), the canonical
  examples of bucketing in competitive Pokémon AI research are reducing the range of possible hit
  point values or shrinking the number of damage [rolls](#roll).
cartridge: |
  The game of Pokémon as it exists on the original Nintendo console hardware (due to the earliest
  [generations](#generation) of Pokémon being played on Game Boy ROM cartridges).
CFR: |
  Counterfactual regret minimization TODO CFR+, MC-CFR
chance: TODO chance node, Chance player, -Dchance
client: |
  Code that communicates with the game [engine](#engine) and enables a player to play the game. In
  the standard case of Pokémon the client only has a partial representation of one perspective of
  the actual battle state stored on the [server](#server). Clients connect to the server and
  communicate with the server via a [protocol](#protocol), and by default this protocol does not
  share hidden [information](#information).
conmeta: |
  A constructed [metagame](#metagame) where the artificially created rules have been arbitrarily
  tailored to simplify things for artificial intelligence agents, _e.g._, the [Shanai
  Cup](https://web.archive.org/web/20110706011535/http://pokemon-online.eu/forums/showthread.php?6273).
consolidation: |
  Action consolidation is a technique for combining the results of actions with identical outcomes.
  Consolidation is similar to [transpositions](#transposition) in that they both involve
  [symmetry](#symmetry), with the difference being that consolidation allows for skipping similar
  work by leveraging past results whereas [transposition tables](#TT) allow for skipping work that
  has already been done. [Damage coalition](#damage-coalition) is a common form of consolidation in
  competitive Pokémon AI.
contempt: |
  The contempt factor reflects the estimated superiority/inferiority of the program over its
  opponent. Programs incorporating contempt may choose to follow different strategies against
  opponents of varying perceived skill level.
damage calculator: TODO damage formula
damage coalition: |
  A common form of [action consolidation](#consolidation) where damage [rolls](#roll) which produce
  the same results get combined. Damage rolls often result in the same outcome due to rounding or
  if the damage gets _capped_ due to causing a target to faint or breaking a Substitute.
depth: |
  The depth of a node is the number of edges from the node to the [tree's](#game-tree) root node. A
  root node will have a depth of 0.
determinization: |
  The technique of sampling different perfect information states from the set of possibile imperfect
  information states so that methods for solving perfect information games can be applied to games
  with imperfect information.
drafting: |
  A component of certain Pokémon [variants](#variant) where players take turns choosing the Pokémon
  species which will form their pool of available choices during a later
  [team-building](#team-building) component.
driver: |
  Code which operates/controls the [engine](#engine), perhaps to provide additional features or to
  allow for integration within a broader application.
EBC: |
  [Endless Battle Clause](https://dex.pokemonshowdown.com/articles/battlerules), a rule that exists
  in [Smogon](#Smogon) [formats](#format) to guarantee that all battles will terminate in 1000 turns
  or fewer, while also seeking to curtail certain specific degenerate strategies.
EE: |
  Extreme equilbrium, a Nash equilibrium where for both players' mixed strategies cannot be
  described as convex combinations of other mixed strategies that form equilibria.
EEE: |
  Enumeration of extreme equilbria, a linear programming algorithm for determining all of the
  possible [Nash equilibrium](#NE) solutions in a [bimatrix game](#bimatrix-game).
EFG: |
  An [extensive-form game]{.dfn} is a specification of a [game](#game) allowing for the explicit
  representation of a number of key aspects, like the sequencing of players' possible moves, their
  choices at every [decision point](#turn), the (possibly imperfect) [information](#information)
  each player has about the other player's moves when they make a decision, and their
  [payoffs](#payoff) for all possible game outcomes. Extensive-form games also allow for the
  representation of incomplete information in the form of [chance events](#chance) modeled as _moves
  by nature_. Alternatives to the extensive-form game respresentation is the [normal-form]{.dfn}
  representation that simply boils the game down to a payoff [matrix](#bimatrix-game), for the
  [FOSG](#FOSG) representation.
Elo: |
  The Elo rating system, a method for calculating the relative skill levels of players in [zero-sum
  games](#zero-sum). Notably, _not_ "ELO", as the Elo system is named after its creator, Arpad Elo.
embedding: |
  A relatively low-dimensional space into which you can translate high-dimensional vectors, ideally
  capturing some of the semantics of the input by placing semantically similar inputs close together
  in the embedding space. Usually [learned](#learning) and then used as input to a [neural
  network](#NN), examples of embeddings in Pokémon include
  [`poke2vec`](https://aliturfah.com/poke2vec/) and [`pokemb`](https://github.com/spktrm/pokemb).
emulator: |
  Code that is designed to mimic the outwardly observable behavior of both the hardware and software
  features of a real device, to allow for playing a Pokémon [cartridge](#cartridge) on arbitrary
  platforms.
endgame:
  Also known as the [lategame]{.dfn}, the final stage of the game, after the [midgame](#midgame). In
  competitive Pokémon, this stage of the game is far more tractable to solve given enough
  [information](#information) is usually revealed to effectively turn the game into one of
  perfect-information, and certain common scenarios may have been exhaustively solved and encoded in
  a [precomputed](#offline) [endgame tablebase]{.dfn}.
engine: |
  The core code responsible for implementing Pokémon battle mechanics. While multiple
  [engines](/concepts/engines) exist, without any other context the term _engine_ may also refer
  specifically to the [pkmn](#pkmn) [engine](https://pkmn.cc/engine).
EPOké: |
  A [pkmn](#pkmn) [client](#client) library that parses [protocol](#protocol) and builds up a
  representation of the perceived battle state ([information set](#information-set)) using
  [inference](#inference).
Exp3: |
  Exponential-weight algorithm for Exploration and Exploitation, a [bandit](#bandit) algorithm
  commonly used in [tree bandit search](#TBS).
expectiminimax: TODO
exploitability: TODO ε-exploitability
extreme equilibria: TODO
format: TODO metagame
FOSG: |
  A [factored-observation stochastic game]{.dfn} TODO
FP: TODO ficitious play/focus punch
game: |
  Any set of circumstances that has a result dependent on the actions of two or more decision-makers
  ([players](#player)). In the context of competitive Pokémon battling, the _game_ or _battle_ can
  either be viewed as the combination of the [team-building](#team-building) and
  [piloting](#piloting) components (and sometimes even featuring an initial [drafting](#drafting)
  component) or simply the piloting aspect. In most cases, without additional qualifiers the _game_
  can usually be understood to exclusively refer to the piloting component.
game tree: |
  A graph representing all possible game [states](#state) within a [game](#game). The [complete game
  tree]{.dfn} for a game is the game tree starting at the initial state and containing all possible
  [moves](#action) from each state and is equivalent to the tree obtained from the [extensive-form
  game](#EFG) representation). Given that is usually intractable to enumerate the entire game tree
  in Pokémon, AI agents usually search over a [partial game tree]{.dfn} which contains a subset of
  the nodes from the complete game tree.
generation: |
  A grouping of Pokemon game releases that seperates them based on the Pokémon and mechanics they
  include. Generations are typically referred to by acronyms based on their release titles:

    1. _Generation I_: RBY, RB, RBG
    2. _Generation II_: GSC, GS
    3. _Generation III_: ADV, RSE, RS, RSEFRLG
    4. _Generation IV_: DPP, DPPt, DP, HGSS, DPPtHGSS
    5. _Generation V_: BW, BW2, B2W2
    6. _Generation VI_: XY, ORAS
    7. _Generation VII_: SM, USUM
    8. _Generation VIII_: SS, SwSh
    9. _Generation IX_: SV
genetic algorithm: |
  Genetic algorithms ([GA]{.dfn}) are a method for solving both constrained and unconstrained
  optimization problems that is based on [natural
  selection](https://en.wikipedia.org/wiki/Natural_selection). Genetic algorithms are typically
  useful when the objective function is discontinuous, nondifferentiable, [stochastic](#stochastic),
  or highly nonlinear, and are often used to determine the values of
  [hyperparameters](#hyperparameter).
GF: |
  [Game Freak](https://www.gamefreak.co.jp/), primary developer and co-owner of Pokémon, responsible
  for the [cartridge](#cartridge) implementation.
gimmick:
  Can be used to describe an unorthodox and usually suboptimal set Pokémon set, but more commonly
  refers to [generational gimmicks]{.dfn} which are novel mechanics which have been introduced to
  certain Pokémon [generations](#generation) which alter which [actions](#action) are possible.
  Generational gimmicks include [Mega
  Evolution](https://bulbapedia.bulbagarden.net/wiki/Mega_Evolution),
  [Z-Moves](https://bulbapedia.bulbagarden.net/wiki/Z-Move),
  [Dynamax](https://bulbapedia.bulbagarden.net/wiki/Dynamax), and
  [Terastallization](https://bulbapedia.bulbagarden.net/wiki/Terastal_phenomenon).
Glicko: |
  The Glicko rating system, a method used by [Pokémon Showdown](#PS) to assess a player's strength.
  Used primarily for [usage stats](#usage-stats).
GXE: |
  [Glicko X-Act Estimate or _GLIXARE_](https://www.smogon.com/forums/threads/51169/), an estimate
  used by [Pokémon Showdown](#PS) of a player's win chance against an average player.
HCE: |
  Hand-crafted evaluation --- a [evaluation function](#value) written manually (as opposed to
  learned), often leveraging [heuristics](#heuristic) or other [rule-based](#rule-based) approaches.
heuristic: |
  An approach for arriving at a solution by trial and error or by [rules](#rule) that are only
  loosely defined via methods which are not optimal, perfect, or rational, but is nevertheless
  sufficient for reaching an immediate, short-term goal or approximation.
hyperparameter: |
  A hyperparameter is a parameter whose value is used to control the learning process. By contrast,
  the values of other parameters (typically node weights) are derived via training.
inference: TODO deduction
information set: TODO ([IS]{.dfn})
information: TODO perfect vs. imperfect vs. hidden, complete vs. incomplete, public vs. private
input log: |
  A log which tracks every input that has been made over the course of a battle, where an
  [input]{.dfn} encodes the [action](#action) taken by a player. However, there are several
  potential ways this input can be encoded:

    - [raw input]{.dfn} simply encodes the action type and [slot](#slot) (and optionally the
    target), _e.g._, `switch 4` or `move 1 2 mega`. This form is ultimately required by an
    [engine](#engine) to unambiguously implement the battle mechanics of Pokémon.
    - [logical input]{.dfn} is an encoding  where move or species names are used in lieu of slots,
    _e.g._, `switch zapdos` or `move thunderbolt`. This encoding is more intuitive and often more
    useful to work with when utilizing [machine learning](#learning) techniques, though is not
    accepted by all engines and can be ambiguous (_e.g._, in [formats](#format) without the
    [Species Clause](https://www.smogon.com/xy/articles/clauses))
    - [contextual input]{.dfn} is a class of inputs which add additional context to a logical input
    about the scenario the input was made in to provide necessary information for
    [learning](#learning) algorithms, _e.g._, `Zapdos Thunderbolt vs. Starmie` or `Zapdos ->
    Starmine vs. Rhydon`

  Applying anchored subsets of the input log to the initial battle state can be used to recompute
  past battle states, and competitive Pokémon developers may choose to improve memory overhead by
  storing the game tree in terms of an initial state and inputs as opposed to storing copies of
  battle state at each node.
interior equilibra: TODO
joint actions: TODO
killer move: |
  A move ordering [heuristic](#heuristic) that optimizing search by prioritizing evaluating highly
  advantageous moves that dramatically limit an opposing player's response options (_e.g._, a move
  which causes an opposing Pokémon to faint, possibly winning the battle).
knowledge: TODO
Lc0: |
  [Leela Chess Zero (lc0)](https://lczero.org/), an open source computer chess agent based on the
  design behind [AlphaGo](#AlphaGo). Regularly competes with
  [Stockfish](https://stockfishchess.org/) for the title of strongest computer chess agent.
lead: |
  The Pokémon on a player's team that is sent out first at the beginning of the battle (sometimes
  predetermined during [team-building](#team-building) though otherwise determined in [Team
  Preview](#Team-Preview)).
learning: |
  Learning refers to machine learning ([ML]{.dfn}), where statistical algorithms are leveraged to
  generalize and perform tasks without explicit instructions. There three main categories of
  machine learning are:

    1. [supervised learning]{.dfn}, where both example inputs and their desired outputs are provided
    2. [unsupervised learning]{.dfn}, only the inputs are provided, and
    3. [[reinforcement learning](#RL)]{.dfn}, where an agent aims to perform a certain goal and is
    given feedback along the way that it attempts to maximize
Libratus:
  The first computer agent to acheive superhuman performance in [no-limit Texas hold 'em
  poker](https://en.wikipedia.org/wiki/Go_(game)), using a new variant of [counterfactual regret
  minimization](#CFR) dubbed CFR+ [(Brown 2017)](/research#Brown:2017){.subtle}. Libratus was later
  followed by Modicum [(Brown 2018)](/research#Brown:2018){.subtle}, Pluribus [(Brown
  2019)](/research#Brown:2019){.subtle}, and ReBeL [(Brown 2020)](/research#Brown:2020){.subtle} ---
  state of the art agents which are similarly foundational as [AlphaGo](#AlphaGo) but for imperfect
  information games.
linear programming: |
  Linear programming ([LP]{.dfn}), also called linear optimization, is a method to achieve the best
  outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are
  represented by linear relationships. Typically used in competitive Pokémon AI research to solve
  for the [Nash equilbrium](#NE).
look ahead: |
  The [depth](#depth) that a search algorithm searches to.
LOS: |
  The likelihood of superiority denotes how likely it would be for two players of the same strength
  to reach a certain result --- in other fields called a p-value, a measure of statistical
  significance of a departure from the null hypothesis.
lrsnash: |
  A linear programming algorithm for determining all of the possible [Nash equilibrium](#NE)
  solutions in a [bimatrix game](#bimatrix-game) published in [(Avis
  2010)](/research#Avis:2010){.subtle} and available in the
  [`lrslib`](https://cgm.cs.mcgill.ca/~avis/C/lrs.html).
match-up: |
  Match-up (or [MU]{.dfn}) decribes the advantage (or disadvantage) of a given team or Pokémon
  against another team or Pokémon. In the context of teams or the battle as a whole, match-up
  determines which team is favored to win after [team-building], and often the advantage may be
  strongly in the favor of one side.
matrix node: TODO
MDP: |
  A [Markov decision process]{.dfn} is as a [stochastic](#stochastic) decision-making process that
  uses a mathematical framework to model the decision-making of a dynamic system in scenarios where
  the results are either random or controlled by a decision maker, which makes sequential decisions
  over time. In competitive Pokémon AI reseach, _MDP_ may also refer to the
  [MaxDamagePlayer](#MaxDamagePlayer) in certain contexts.
MaxDamagePlayer:
  A simple competitive Pokémon playing [agent](#agent) that chooses to use whichever `move` action
  will do the most damage the [next turn](#OTL) to the opponent, commonly seen in the
  [literature](/projects) alongside the [RandomPlayer](#RandomPlayer) when benchmarking/testing
  agents due to its simplicity of implementation. Certain variants of this will exist depending on
  how much of the [damage formula](#damage-calculator) is implemented, with the simplest versions of
  MaxDamagePlayer perhaps only considering each move's effective base power after [STAB](#STAB) and
  type effectiveness. A fully featured MaxDamagePlayer can achieve a much higher level of play than
  a RandomPlayer, though is extremely [exploitable](#exploitability) (this can be somewhat mitigated
  by the addition of some randomness or certain [heuristics](#heuristic)).
MCTS: TODO
metagame: TODO
metaheuristic: TODO <https://en.wikipedia.org/wiki/Metaheuristic>
midgame: |
  Term to describe everything that happens between the early game [opening](#opening) and the
  [endgame](#endgame).
minimax:
  Also known as [maximin]{.dfn}, describes the concept of minimizing the possible loss for a worst
  case (maximum loss) scenario. Usually refers to the minimax [search](#search) algorithm, a
  recursive algorithm for choosing the next move in an n-player game such that each player makes the
  move maximizes the mininum [value](#value) of the position resulting from the opponent's possible
  moves. Furthermore, due to competitive Pokémon being a [stochastic](#stochastic) game, minimax is
  often actually refering to the [expectiminimax](#expectiminimax) algorithm.
move: |
  See [action](#action).
MVP: |
  The [minimal viable product]{.dfn}, a version with the bare-mininum number of features to be
  usable/demonstrate enough of a solution that feedback becomes relevant.
NE: |
   The [Nash equilbrium]{.dfn}, a stable state of a system involving the interaction of different
   participants, in which no participant can gain by a unilateral change of [strategy](#strategy) if
   the strategies of the others remain unchanged. A mixed strategy Nash equilbrium or mixed Nash
   equilbrium ([MNE]{.dfn}) is a Nash equilbrium which requires a mixed strategy (a probability
   distribution over pure strategies), and every n-player game has at least one mixed Nash
   equilbrium. In competitive Pokémon, Nash equilbrium is used interchangeably with mixed Nash
   equilbrium.
NN: |
  A [neural network]{.dfn}, is a computer system modeled on the human brain and nervous system,
  comprised of multiple layers of _nodes_, containing an input layer, one or more hidden layer, and
  an output layer. Each node, or artificial neuron, connects to another and has an associated weight
  and threshold. If the output of any individual node is above the specified threshold value, that
  node is activated, sending data to the next layer of the network. Otherwise, no data is passed
  along to the next layer of the network.
NNUE: |
  An [efficiently updatable [neural network](#NN)]{.dfn}, stylized _ƎUИИ_, an architecture intended
  to replace the [evaluation function](#value) of [alpha-beta](#Alpha-beta) searches running on a
  CPU via [SIMD](#SIMD) instructions. [Originally developed for Computer
  Shogi](https://github.com/asdfjkl/nnue/blob/main/nnue_en.pdf), NNUE has been used successfully in
  chess engines such as [Stockfish](https://stockfishchess.org/) to acheive high ratings.
observation: |
  Information produced when the [state](#state) [transitions](#transition). In Pokémon this may
  include a result which can be used to determine [payoff](#payoff) and possibile legal
  [actions](#action), _logs_ which detail various events that may have occured, an account of the
  [chance](#chance) actions, or a multitude of other possibilities depending on the
  [engine](#engine).
offline: |
  An offline algorithm is given the whole problem data from the beginning and is required to output
  an answer which solves the problem at hand. If something can be done _offline_ that usually means
  that it can be precomputed ahead-of-time, as opposed to in the middle of a game (contrast to
  [online](#online)).
online: |
   An online algorithm is one that can process its input piece-by-piece in a serial fashion, _i.e._,
   in the order that the input is fed to the algorithm, without having the entire input available
   from the start (in contrast to [offline](#offline)).
opening: |
  The beginning of the game (and sometimes referred to as the [early game]{.dfn}), which in Pokémon
  consists of the [Team Preview](#Team-Preview) in generations where it exists as well as the first
  few turns of the initial [lead](#lead) [match-up](#match-up). Followed by the [midgame](#midgame).
  Many [agents](#agent) may leverage an [opening book]{.dfn} which is a [precomputed](#offline)
  [policy](#policy) for handling play at this stage of the game.
opponent modeling: TODO
OTL: |
  One-[turn](#turn) [look ahead](#look-ahead). The [MaxDamagePlayer](#MaxDamagePlayer) is the
  conventional name for an agent which leverages only a single turn of look ahead.  _$`N`TL_ can be
  used to generalize this shorthand for describing the depth an agent searches to, _e.g._, _3TL_ for
  three turns worth of look ahead.
pathology: |
  Game-tree pathology is a phenomenon where searching a game-tree deeper gives results in worse
  decision.
payoff: |
  The reward a player receives from arriving at a particular outcome. In Pokémon, only terminal
  states give rewards, where the reward is determined based on the result of the battle (winning,
  losing or drawing --- though pedantically, Pokémon glitches mean that one also needs to support
  the notion of a battle ending in _error_ which can usually be mapped to a draw) and the
  utility/reward function (which will usually map [W/L/T](#WLT) to `1/-1/0` making Pokémon a
  [zero-sum](#zero-sum) game or `1/0/0.5` making Pokémon a [constant-sum](#zero-sum) game, the
  latter being more common).
PBS: TODO public belief state
perspective: |
  Perspective or [viewpoint]{.dfn} determines which information in Pokémon is available. Perspective
  can refer to a specific [player](#player) or side, or can be one of two special perspectives ---
  the [omniscient perspective]{.dfn} which is aware of all information from both sides and the
  [spectator perspective]{.dfn} which is aware of all [public information](#information) but none of
  the private information of either player.
piloting: |
  The component of competitive Pokémon that involves playing out a battle [online](#online) _after_
  each players' teams have already been chosen.
pkmn: |
  A common abbreviation of Pokémon dating back to the earliest releases where the stylized
  ^P^~K~^M^~N~ was included in the [cartridge](#cartridge) character set. However, this abbreviation
  has since been adopted as the name for the [pkmn](https://pkmn.cc) collection of projects (notably
  the pkmn [engine](#engine), [`libpkmn`](https://pkmn.cc/engine)) and is often what is being
  referenced (and is always what is being referred to when prefixed with an _@_, as @pkmn is the
  name of the [organization](https://github.com/pkmn)).
player: |
  A strategic decision-maker within the context of the game. In Pokémon these are usually referred
  to as _Player 1_ and _Player 2_ (alternatively, _P1_/_P2_ or _Player A_/_Player B_) and are
  technically not completely [symmetrical](#symmetry) because certain game mechanics depend on the
  notion of the _host_ player (conventionally P1). In more general terms, either P1 or P2 may be
  considered the _player_ vs. the _enemy_ / _foe_ depending on [perspective](#perspective) --- the
  P1 vs. P2 distinction is absolute whereas the less specific player vs. foe terminology is
  relative. When considering Pokémon as a [bimatrix game](#bimatrix-game) the _row player_ and
  _column player_ are usually also used to refer to relative perspectives.
playout: TODO
PoG:
  Player of Games, the original name of the general game-playing agent from [(Schmid
  2021)](/research#Schmid:2021){.subtle} which utilizes improved counterfactual regret minimizaton
  to acheive superhuman performance in a variety of games.
policy: |
  A policy is a [state](#state) to [action](#action) mapping --- for each action possible from a
  given state, a policy returns the probability of taking the action. Ultimately, the objective of a
  competitive Pokémon AI is to determine the optimal policy for any given state. [Reinforcement
  learning](#RL) aims to accomplish this by learning a [policy network]{.dfn}.
POMDP: |
  Partially observable Markov decision process, a generalization of a [Markov decision
  process](#MDP) which models an agent decision process in which it is assumed that the system
  dynamics are determined by an MDP, but the agent cannot directly observe the underlying
  [state](#state).
pondering: |
  The act of thinking during an opponent's turn. Given that Pokémon is a [simultaneous move](#SM)
  game, pondering occurs after a player has submitted their action (or been asked to wait) while
  they are waiting for their next opportunity to input an action.
prediction: TODO
protocol: TODO
pruning: TODO
PS: |
  [Pokémon Showdown](https://pokemonshowdown.com), the most popular and influential Pokemon battle
  [simulator](#sim).
Q-learning: |
  A model-free [reinforcement learning](#RL) algorithm to learn the value of an [action](#action) in
  a particular [state](#state) that can handle problems with [stochastic](#stochastic)
  [transitions](#transition) and [rewards](#payoff) without requiring adaptations. Q-learning was
  used by DeepMind in their Deep Q-Network ([DQN]{.dfn}) algorithm  along with a technique called
  experience replay to solve a wide-range of Atari games [(Mnih
  2015)](/research#Mnih:2015){.subtle}.
RandomPlayer: |
  Also known as [RP]{.dfn}, a trivial competitive Pokémon playing [agent](#agent) that leverages
  some version of a [uniform policy](#uniform-policy), commonly seen in the [literature](/projects)
  alongside the [MaxDamagePlayer](#MaxDamagePlayer) when benchmarking/testing agents due to its
  simplicity of implementation. However, despite this seemingly simple definition, multiple subtly
  different versions of the RandomPlayer exist --- _e.g._, many implementations decide to _choose_
  only `move` actions unless forced to _consider_ `switch` actions, and may have similar
  [heuristics](#heuristic) for decided how to treat generational [gimmicks](#gimmick).

  Formally, the notation $`RandomPlayer(N\%)` should be used to refer to an agent which $`N\%` of
  the time uniformly chooses to make a `switch` action whem available, otherwise choosing uniformly
  between possible `move` actions. $`RandomPlayer(\widetilde{N\%})` will instead only consider
  `switch` actions $`N\%` of the time when they're available, otherwise will choose a `move` action.
  This distinction of choosing uniformly between a minimal subset of the action space or considering
  potentially multiple subsets of the space can be extended  to gimmicks such as `mega`, `zmove`,
  `dynamax` or `terastallize`, though in those cases a more explicit notation is preferred, _e.g._,
  $`RandomPlayer(switch=\widetilde{20\%}, zmove=90\%)` would consider `switch` 20% of the time and
  use `zmove` when available 90% of the time.
regret: |
  The [value](#value) of difference between a possible (usually optimal) [action](#action) and of
  the action that has actually been chosen. Key concept underpinning [counterfactual regret
  minimization](#CFR).
relaxation: TODO
reverse damage calculator: TODO
RNG:
  A random number generator, though almost always in the context of competitive Pokémon this refers
  to a pseudo-random number generator ([PRNG]{.dfn}). The term RNG can also simply refer to random
  events in general. RNGs usually produce a stream of random numbers which depend on the initial
  starting state of the generator, known as its [seed]{.seed}.
RL: |
  Reinforcement learning is form of [machine learning](#learning) where an [agent](#agent) learns
  to take actions to maximize a cumulative reward.
roll: TODO
rollout: TODO
rule-based: |
  A system that applies human-made [rules](#rule) to store, sort and manipulate data as opposed to
  rules discovered via machine [learning](#learning). These systems typically take the forum of
  `if-then` statements and involve [hand-crafted evaluation](#HCE) functions.
rule: TODO PS custom _rule_ vs. rules-ased
search: TODO
self-play: TODO
sequentialization: TODO serialization
server: |
  Where the game [engine](#engine) is being run and where the actual, complete battle
  [state](#state) is stored. The server is responsible for keeping relevant information hidden from
  the [client](#client).
sim: |
  A [simulator]{.dfn} that mimics the behavior of something by modelling the underlying state of the
  target, though doesn't necessarily attempt to do so through [emulation](#emulator) of an external
  device. In the context of Pokémon, _simulator_ more often describes a particular platform that
  provides a venue for online Pokémon battling, and usually involves a game server being built
  around a Pokémon [engine](#engine). [Pokémon Showdown](#PS) is the most comprehensive and most
  populator Pokémon simulator.
SIMD:
  SIMD is short for Single Instruction on Multiple Data, which are a type of CPU instruction which
  allows for computing operations in parallel on a vector of numbers.
simplification: TODO
simultaneous: TODO
slot: |
  Refers to the 1-indexed position of either a Pokémon in a player's party (known as a [team
  slot]{.dfn} or [party slot]{.dfn}) or a move in a Pokémon's moveset ([move slot]{.dfn}). Required
  when specifying a player's [action](#action).
SM: TODO AM, compare to sequential, sun moon (generation)
Smogon: |
  [Smogon University](https://smogon.com), home of competitive Pokémon battling and curator of rules
  and restrictions for the most popular competitive [formats](#format) outside of those supported by
  Nintendo.
sparse: TODO
STAB: |
  An abbreviation for same-type attack bonus, a mechanic where a damage boost that is applied to
  moves used by a Pokémon of the same type.
state: |
  The information required to determine which [actions](#action) are available to each
  [player](#player). In Pokémon, this is the *battle*, and the term _battle_ is used as opposed to
  _state_ as _state_ is a loaded term in programming (programming in general is arguably all about
  the management of state, so _state_ needs to be qualified as _battle state_ or _game state_ to be
  unambigious) despite it being a useful term in papers dealing purely with theory.
stochastic: TODO probabilistic vs. non-deterministic
strategy: |
  Used interchangeably used with [policy](#policy), refers to generically to a plan to acheive an
  overall goal.
subgame: |
  A notion used in the solution concept of subgame perfect [Nash equilibrium](#NE), a refinement of
  the Nash equilibrium that eliminates non-credible threats. Subgames are a subset of a game that
  meets a [specific set of criteria](https://en.wikipedia.org/wiki/Subgame) and when taken in
  isolation constitutes a game in its own right.
symmetry: |
  Similarity or exact correspondence between different things. In the context of games, symmetry can
  result certain [states](#state) occuring more than once in the [game tree](#game-tree), meaning
  techniques such as [transposition tables](#TT) a can be leveraged to speed up search.
TD-learning: |
  [Temporal difference learning]{.dfn} refers to a class of model-free [reinforcement learning](#RL)
  methods which learn by bootstrapping from the current estimate of the [value function](#value).
  These methods sample from the environment and perform updates based on current estimates,
  adjusting predictions to match later, more accurate, predictions about the future before the final
  outcome is known.
Team Preview: |
  A pre-battle phase introduced in [Generation V](#generation) in which players get to see each of
  the Pokémon on their opponent's team and choose which Pokémon get brought to battle and in which
  order.
team-building: |
  The component of competitive Pokémon that involves constructing a team [offline](#offline) before
  a battle, usually with the aim of being able to beat the entire [metagame](#metagame).
Thompson sampling: |
  A [bandit](#bandit) algorithm which chooses the [action](#action) that maximizes the [expected
  reward](#value) with respect to a randomly drawn [belief](#belief).
Torch: |
  The defacto standard open source machine learning and scientific computing framework, most often
  used in Python via [PyTorch](https://en.wikipedia.org/wiki/PyTorch).
TPCi: |
  [The Pokémon Company International](https://corporate.pokemon.com/), co-owners of the Pokémon
  franchise along with the publisher and trademark-holder, Nintendo, and the developers, [Game
  Freak](#GF).
transformer: |
  A [neural network](#NN) that learns context and thus meaning by tracking relationships in
  sequential data.
transition: |
  The change that a [state](#state) undergoes due to an [action](#action). In the [pkmn](#pkmn)
  engine, this is implemented by a a battle's `update` function. In game theory, _turns_
  typically count transitions (though [not in Pokémon](#turn)), and a transition may produce a
  [payoff](#payoff) or some sort of [observation](#observation).
transitions: |
  The entire set of possible [transitions](#transition) from any given [state](#state). While every
  Pokémon game engine must allow for performing a single transition, performing _all_ transitions at
  once and returning the set of states is a less common feature, and almost always when
  _transitions_ or `transitions` is used in conversation as a noun it is referring to this
  functionality.
transposition: |
  A sequence of moves that results in a position that may also be reached by another, more common
  sequence of moves. Transpositions are a type of [symmetry](#symmetry) and are often handled via
  [transposition table](#TT). True transpositions are uncommon in Pokémon unless some level of
  [abstraction](#abstraction) has been applied.
TT:
  A [transposition table]{.dfn} is a cache of previously seen positions, and associated evaluations,
  in a [game tree](#game-tree) generated by a computer game playing program. If a position recurs
  via a different sequence of moves, the value of the position is retrieved from the table, avoiding
  re-searching the game tree below that position.
TBS: |
  [Tree-bandit search]{.dfn}, the name for the family of search algorithms which are roughly based
  around [Monte-carlo tree search](#MCTS) but which make use of various [bandit](#bandit) algorithms
  to greatly improve performance and convergence.
tuning: |
  The process of maximizing a [machine learning](#learning) model's performance without overfitting
  or creating too high of a variance, usually via [hyperparameters](#hyperparameter).
turn: |
  Game theory uses the term [ply]{.dfn} to refer to one turn taken by one player in a
  [sequential](#SM) game which doesn't apply to Pokémon given that Pokémon is a [simultaneous](#SM)
  game. A _turn_ in Pokémon is a well-defined concept as certain game mechanics depend on its
  definition (_e.g._, residual damage happens at the end of a turn in Pokémon in later generations).
  Instead, it is more useful to in terms of [decision point]{.dfn} that occur between _updates_ to
  the battle state (which may happen multiple times in a single turn, _e.g._, due to a Pokémon using
  Baton Pass or fainting) --- places where the game requires input from players to proceed. In
  [Pokémon Showdown](#PS) and the [pkmn](#pkmn) engine, a decision point always requires a [joint
  action](#action), introducing the concept of _passing_/_waiting_ to account for situations where
  on a console one of the players is forced to do nothing while input is collected from their
  opponent.
UCB: |
  Upper Confidence Bound, a [bandit](#bandit) algorithm commonly used in [tree
  bandit search](#TBS).
UCT: |
  Upper Confidence bounds applied to Trees, the contemporary standard implementation of [Monte-carlo
  tree search](#MCTS) which uses the [UCB](#UCB) algorithm to select promising child nodes to
  expand. See also [tree bandit search](#TBS).
uniform policy: |
  A [policy](#policy) which assigns equal (uniform) probability to each of the actions possible ---
  this sort of policy is usually only optimal in the absence of any other information (_e.g._, at
  the beginning of a search).
usage stats: |
  Statistics processed from a corpus of battle logs that detail the usage of various Pokémon and
  their attributes for a given format. [Smogon University](#Smogon) produces [public
  statistics](https://www.smogon.com/stats/) calculated from all rated battles on [Pokémon
  Showdown](#PS) each month which they use to influence the tiering decisions for the
  [formats](#format) they maintain, though alternative usage statistics can also be produced for
  specific use cases.
value: |
  The expected [payoff](#payoff) from a given [state](#state), produced by an [evaluation
  function]{.dfn}. Evaluation functions are usually difficult to produce accurately in Pokémon and
  are often approximated with [reinforcement learning](#RL) via  a [value network]{.dfn} in that
  assigns a value to each state of the game by calculating an expected cumulative score.
vaporware: |
  Software that has been advertised but is not yet available to use/buy, either because it is only a
  concept or because it is still being written or designed. See also [pkmn](#pkmn).
variant: |
  A variation from the standard rules of competitive Pokémon which usually simplifies/relaxes
  certain properties/rules of the game to make it more tractable for AI, with the expectation that
  solutions to a variant will usually be useful for generalizing to the original ruleset. In
  computer poker, [Kuhn poker](https://en.wikipedia.org/wiki/Kuhn_poker) is the most common
  simplification studied, whereas in Pokémon there are [numerous potential options of
  variants](/concepts/variants). Note that while the various Pokémon [formats](#format) can be
  considered variants, the term _variant_ is reserved to describe simplifications to the game that
  go beyond the rule changes typical between formats.
WLT: |
  WLT or W/L/T refers to win, loss and tie (draw) record of a particular [player](#player) or
  [agent](#agent).
wincon: |
  A [win condition]{.dfn} is a Pokémon or scenario that a player needs in order to secure that they
  win the game.
zero-sum: |
  A [zero-sum game]{.dfn} is a mathematical representation in game theory of a situation that
  involves two sides, where the result is an advantage for one side and an equivalent loss for the
  other, such that the net improvement in benefit of the game is zero. Zero-sum games are a specific
  example of a [constant-sum game]{.dfn}, a concept when the sum of the players' gains and losses is
  a fixed constant $`C`. Constant-sum games can be trivially transformed into a zero-sum game by
  subtracting $`C` from every [payoff](#payoff).
